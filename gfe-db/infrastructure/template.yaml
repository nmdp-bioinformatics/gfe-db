AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a VPC with public subnet, S3 bucket, parameters and secrets for the gfe-db application

Parameters:
  Stage:
    Type: String
    Description: Stage of production
  AppName:
    Type: String
  createVpc:
    Type: String
    AllowedValues:
      - "true"
      - "false"
  AdminEmail:
    Type: String
  DataBucketName:
    Type: String
  VpcId:
    Type: String
    Description: Required if createVpc is false
  PublicSubnetId:
    Type: String
    Description: Required if createVpc is false
  PrivateSubnetId:
    Type: String
    Description: Required if createVpc is false
  GitHubPersonalAccessToken:
    Type: String
    NoEcho: true

Conditions:
  CreateVpc: !Equals [!Ref createVpc, "true"]

Mappings:
  # AvailabilityZoneMap defines availability zones where an m5d.xlarge instance is available (used for Neo4j server).
  AvailabilityZoneMap:
    us-east-1:
      AvailabilityZone: us-east-1a
    us-east-2:
      AvailabilityZone: us-east-2a
    us-west-1:
      AvailabilityZone: us-west-1a
    eu-central-1:
      AvailabilityZone: eu-central-1a
    eu-west-1:
      AvailabilityZone: eu-west-1a
    eu-west-2:
      AvailabilityZone: eu-west-2a
    eu-west-3:
      AvailabilityZone: eu-west-3a

Resources:
  StageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Stage"
      Description: "Stage of production"
      Value: !Ref Stage

  AppParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/AppName"
      Description: "Name of application"
      Value: !Ref AppName

  CreateVpcParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/CreateVpc"
      Description: "True if stack creates a VPC, false if stack uses an existing VPC"
      Value: !Ref createVpc

  CreateVpcConditionVpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${AppName}-${AWS::Region}-vpc"

  CreateVpcConditionPublicSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone:
        !FindInMap [AvailabilityZoneMap, !Ref AWS::Region, AvailabilityZone]
      MapPublicIpOnLaunch: true

  CreateVpcConditionPrivateSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVpc
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref CreateVpcConditionVpc
      AvailabilityZone: !GetAtt CreateVpcConditionPublicSubnet.AvailabilityZone

  CreateVpcConditionInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpc

  CreateVpcConditionPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc

  CreateVpcConditionVpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVpc
    Properties:
      VpcId: !Ref CreateVpcConditionVpc
      InternetGatewayId: !Ref CreateVpcConditionInternetGateway

  CreateVpcConditionPublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpc
    DependsOn:
      - CreateVpcConditionVpcGatewayAttachment
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CreateVpcConditionInternetGateway

  CreateVpcConditionPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpc
    Properties:
      RouteTableId: !Ref CreateVpcConditionPublicRouteTable
      SubnetId: !Ref CreateVpcConditionPublicSubnet

  VpcIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/VpcId"
      Description: !Sub "Name of VPC network for ${AppName}"
      Value: !If
        - CreateVpc
        - !Ref CreateVpcConditionVpc
        - !Ref VpcId

  PublicSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PublicSubnetId"
      Description: !Sub "Public Subnet for the ${AppName} Neo4j server"
      Value: !If
        - CreateVpc
        - !Ref CreateVpcConditionPublicSubnet
        - !Ref PublicSubnetId

  PrivateSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/PrivateSubnetId"
      Description: !Sub "Private Subnet for the ${AppName} Neo4j server"
      Value: !If
        - CreateVpc
        - !Ref CreateVpcConditionPrivateSubnet
        - !Ref PrivateSubnetId

  Neo4jSubnetIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Neo4jSubnetId"
      Description: !Sub "Subnet for the ${AppName} Neo4j server"
      Value: !GetAtt PrivateSubnetIdParameter.Value

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataBucketName

  DataBucketNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketName"
      Description: "Name of gfe-db data bucket"
      Value: !Ref DataBucket

  DataBucketArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketArn"
      Description: "ARN of gfe-db data bucket"
      Value: !GetAtt DataBucket.Arn

  DataBucketRegionalDomainNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataBucketRegionalDomainName"
      Description: "S3 Bucket Regional Domain name for application bucket"
      Value: !GetAtt DataBucket.RegionalDomainName

  BuildServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Stage}-${AppName}-build-server-sg"
      GroupDescription: !Sub "Security group for the ${Stage}-${AppName} build server"
      VpcId: !If
        - CreateVpc
        - !Ref CreateVpcConditionVpc
        - !Ref VpcId
      # SecurityGroupIngress: # Uncomment to allow SSH access to build instance
      #   - CidrIp: 0.0.0.0/0
      #     FromPort: 22
      #     IpProtocol: tcp
      #     ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${AppName}-build-server-sg"

  BuildServerSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/BuildServerSecurityGroupId"
      Description: "ID of the security group for the build server"
      Value: !Ref BuildServerSecurityGroup

  Neo4jDatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${Stage}-${AppName}-neo4j-sg"
      GroupDescription: Security group for the GFE database
      VpcId: !If
        - CreateVpc
        - !Ref CreateVpcConditionVpc
        - !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
          Description: HTTP access for SSL certificate creation (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
          Description: HTTPs access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7474
          IpProtocol: tcp
          ToPort: 7474
          Description: Neo4j HTTP access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7473
          IpProtocol: tcp
          ToPort: 7473
          Description: Neo4j HTTPS access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 7687
          IpProtocol: tcp
          ToPort: 7687
          Description: Neo4j Bolt driver access (required)
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
          Description: Update IP to use MyIP
      Tags:
        - Key: Name
          Value: !Sub "${Stage}-${AppName}-neo4j-sg"

  Neo4jDatabaseSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/Neo4jDatabaseSecurityGroupId"
      Description: "Name of the Neo4jDatabaseSecurityGroup"
      Value: !Ref Neo4jDatabaseSecurityGroup

  GitHubPersonalAccessTokenSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      Name: !Sub "${AppName}-${Stage}-GitHubPersonalAccessToken"
      Description: GitHub Personal Access Token for repository access
      SecretString: !Sub '{"personal_access_token":"${GitHubPersonalAccessToken}"}'

  DataPipelineErrorsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineErrorsTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineErrorsTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email

  DataPipelineErrorsTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataPipelineErrorsTopicArn"
      Description: !Sub "ARN for ${AppName} Data Pipeline Errors SNS topic"
      Value: !Ref DataPipelineErrorsTopic

  DataPipelineExecutionTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref DataPipelineExecutionTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref DataPipelineExecutionTopic
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId

  DataPipelineExecutionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AppName} Data Pipeline Errors"
      Subscription:
        - Endpoint: !Ref AdminEmail
          Protocol: email
          
  DataPipelineExecutionTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "/${AppName}/${Stage}/${AWS::Region}/DataPipelineExecutionTopicArn"
      Description: !Sub "ARN for ${AppName} Data Pipeline Errors SNS topic"
      Value: !Ref DataPipelineExecutionTopic
